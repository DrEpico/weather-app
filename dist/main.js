(()=>{"use strict";document.querySelector("body"),document.querySelector("body");const e=document.querySelector("body");!function(e){let t=document.createElement("div");t.id="mainPane";let d=document.createElement("div");d.id="currentWeather";let n=document.createElement("div");n.id="search",function(e){let t=document.createElement("div"),d=document.createElement("input"),n=document.createElement("button");n.textContent="Search",t.appendChild(d),t.appendChild(n),e.appendChild(t),n.addEventListener("click",(function(){let t=d.value.trim();!async function(e,t){let d,n,a;try{const c=await fetch(`http://api.weatherapi.com/v1/forecast.json?key=195157837b034a1d883103942240706&q=${t}&days=3&aqi=yes&alerts=yes`,{mode:"cors"}),o=await c.json();if(console.log(o),o.current){d=document.createElement("span"),n=document.createElement("span"),a=document.createElement("span");let t=o.current.condition.text,c=o.current.temp_c,r=o.current.is_day;d.textContent=t,n.textContent=c,a.textContent=r,e.appendChild(d),e.appendChild(n),e.appendChild(a)}else console.log("No data found for the search keyword.")}catch(e){console.error("An error occurred:",e)}}(e,t),async function(e){try{const t=await fetch(`http://api.weatherapi.com/v1/forecast.json?key=195157837b034a1d883103942240706&q=${e}&days=3&aqi=yes&alerts=yes`,{mode:"cors"}),d=await t.json();d.current?(console.log(d.forecast.forecastday[0].day.condition.text),console.log(d.forecast.forecastday[0].day.avgtemp_c)):console.log("No data found for the search keyword.")}catch(e){console.error("An error occurred:",e)}}(t)}))}(n);let a=document.createElement("div");a.id="animation";let c=document.createElement("div");c.id="forecast";let o=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div");o.classList.add("day"),o.id="day1",r.classList.add("day"),r.id="day2",i.classList.add("day"),i.id="day3",c.appendChild(o),c.appendChild(r),c.appendChild(i),t.appendChild(d),t.appendChild(n),t.appendChild(a),t.appendChild(c),e.appendChild(t)}(e),function(e){let t=document.createElement("div");t.id="details";let d=document.createElement("div");d.id="info",["wind","humidity","precipitation","pressure","feelsLike","uv","astro1","astro2","astro3"].forEach((e=>{let t=document.createElement("div");t.id=e,d.appendChild(t)}));let n=document.createElement("div");n.id="hourly";for(let e=1;e<=10;e++){let e=document.createElement("div");e.classList.add("hour"),n.appendChild(e)}t.appendChild(d),t.appendChild(n),e.appendChild(t)}(e)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,