(()=>{"use strict";let e;document.querySelector("body"),document.querySelector("body");const t=document.querySelector("body");!function(t){let d=document.createElement("div");d.id="mainPane";let n=document.createElement("div");n.id="currentWeather";let a=document.createElement("div");a.id="search",function(t){let d=document.createElement("div"),n=document.createElement("input"),a=document.createElement("button");a.textContent="Search",d.appendChild(n),d.appendChild(a),t.appendChild(d),a.addEventListener("click",(async function(){let d=n.value.trim();await async function(t){try{const d=await fetch(`http://api.weatherapi.com/v1/forecast.json?key=195157837b034a1d883103942240706&q=${t}&days=3&aqi=yes&alerts=yes`,{mode:"cors"});e=await d.json(),console.log(e)}catch(e){console.error("An error occurred:",e)}}(d),function(t){let d,n,a;if(e.current){d=document.createElement("span"),n=document.createElement("span"),a=document.createElement("span");let c=e.current.condition.text,o=e.current.temp_c,r=e.current.is_day;d.textContent=c,n.textContent=o,a.textContent=r,t.appendChild(d),t.appendChild(n),t.appendChild(a)}else console.log("No data found for the search keyword.")}(t),async function(){try{e.current?(console.log(e.forecast.forecastday[0].day.condition.text),console.log(e.forecast.forecastday[0].day.avgtemp_c)):console.log("No data found for the search keyword.")}catch(e){console.error("An error occurred:",e)}}()}))}(a);let c=document.createElement("div");c.id="animation";let o=document.createElement("div");o.id="forecast";let r=document.createElement("div"),i=document.createElement("div"),l=document.createElement("div");r.classList.add("day"),r.id="day1",i.classList.add("day"),i.id="day2",l.classList.add("day"),l.id="day3",o.appendChild(r),o.appendChild(i),o.appendChild(l),d.appendChild(n),d.appendChild(a),d.appendChild(c),d.appendChild(o),t.appendChild(d)}(t),function(e){let t=document.createElement("div");t.id="details";let d=document.createElement("div");d.id="info",["wind","humidity","precipitation","pressure","feelsLike","uv","astro1","astro2","astro3"].forEach((e=>{let t=document.createElement("div");t.id=e,d.appendChild(t)}));let n=document.createElement("div");n.id="hourly";for(let e=1;e<=10;e++){let e=document.createElement("div");e.classList.add("hour"),n.appendChild(e)}t.appendChild(d),t.appendChild(n),e.appendChild(t)}(t)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,